buildscript {
    repositories {
        for (mavenRepositoryUrl in [
                "https://maven.aliyun.com/repository/public",
                "https://maven.aliyun.com/repository/spring",
                "https://maven.aliyun.com/repository/mapr-public",
                "https://maven.aliyun.com/repository/spring-plugin",
                "https://maven.aliyun.com/repository/gradle-plugin",
                "https://maven.aliyun.com/repository/google",
                "https://maven.aliyun.com/repository/jcenter",
        ]) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id "de.undercouch.download" version "4.1.1"
}
ext {
    coreName = project.getName()
    mainVersion = "v1.0.0"
    mainGroup = "flink.learning.example"
    javaVersion = 1.8
    mavenRepositoryUrlList = [
            "https://maven.aliyun.com/repository/public",
            "https://maven.aliyun.com/repository/spring",
            "https://maven.aliyun.com/repository/mapr-public",
            "https://maven.aliyun.com/repository/spring-plugin",
            "https://maven.aliyun.com/repository/gradle-plugin",
            "https://maven.aliyun.com/repository/google",
            "https://maven.aliyun.com/repository/jcenter",
    ]
    gitCommitId = { ->
        def headDeafOutputStream = new ByteArrayOutputStream()
        exec {
            commandLine("git", "diff", "HEAD")
            standardOutput = headDeafOutputStream
        }
        def headDeaf = headDeafOutputStream.toString().trim()
        def clean = headDeaf.isEmpty()

        def commitIdOutputStream = new ByteArrayOutputStream()
        exec {
            commandLine("git", "rev-parse", "--short", "HEAD")
            standardOutput = commitIdOutputStream
        }
        return "${commitIdOutputStream.toString().trim()}_${clean ? "" : "dirty"}"
    }
    dockerImageNamePrefix = project.getName()
    constructGroupName = { middleName, projectName ->
        return "${ext.mainGroup}.${middleName}.${projectName} "
    }
    constructVersion = { ->
        return "${ext.mainVersion}_${ext.gitCommitId()}"
    }
    constructDockerImageName = { coreName ->
        return "${ext.dockerImageNamePrefix}_${coreName}:${ext.constructVersion()}"
    }
    scalaBinaryVersion = "2.11"
    jarDependencyVersion = { groupWithArtifact ->
        def slf4jVersion = "1.7.15"
        def jacksonVersion = "2.9.8"
        def grpcVersion = "1.30.1"
        def flinkVersion = "1.11.2"
        def scalaBinaryVersion = ext.scalaBinaryVersion
        def flinkScala = "org.apache.flink:flink-scala_${scalaBinaryVersion}" as String
        def flinkClients = "org.apache.flink:flink-clients_${scalaBinaryVersion}" as String
        def versionMapping = [
                "org.apache.flink:flink-core"                   : flinkVersion,
                "org.apache.flink:flink-java"                   : flinkVersion,
                "org.apache.flink:flink-connector-kafka_2.11"   : flinkVersion,
                "org.inferred:freebuilder"                      : "2.6.1",
                "com.google.code.findbugs:jsr305"               : "3.0.2",
                "com.google.guava:guava"                        : "29.0-jre",
                "org.apache.commons:commons-lang3"              : "3.0",
                "org.slf4j:slf4j-api"                           : slf4jVersion,
                "org.slf4j:slf4j-simple"                        : slf4jVersion,
                "org.freemarker:freemarker"                     : "2.3.9",
                "info.picocli:picocli"                          : "4.5.0",
                "commons-io:commons-io"                         : "2.4",
                "org.apache.commons:commons-exec"               : "1.3",
                "mysql:mysql-connector-java"                    : "8.0.21",
                "com.h2database:h2"                             : "1.4.195",
                "com.fasterxml.jackson.core:jackson-core"       : jacksonVersion,
                "com.fasterxml.jackson.core:jackson-databind"   : jacksonVersion,
                "com.fasterxml.jackson.core:jackson-annotations": jacksonVersion,
                "io.grpc:grpc-api"                              : grpcVersion,
                "io.grpc:grpc-core"                             : grpcVersion,
                "io.grpc:grpc-netty-shaded"                     : grpcVersion,
                "io.grpc:grpc-protobuf"                         : grpcVersion,
                "io.grpc:grpc-stub"                             : grpcVersion,
                "io.grpc:grpc-testing"                          : grpcVersion,
                "io.grpc:protoc-gen-grpc-java"                  : grpcVersion,
                "com.google.protobuf:protoc"                    : "3.12.0",
                "junit:junit"                                   : "4.12",
                "org.apache.tomcat:annotations-api"             : "6.0.53",
                "org.apache.httpcomponents:httpclient"          : "4.5.13",
        ]
        versionMapping.put(flinkScala, flinkVersion)
        versionMapping.put(flinkClients, flinkVersion)
        def version = versionMapping[groupWithArtifact]
        if (!version) {
            throw new RuntimeException("version not found for \"${groupWithArtifact}\"")
        }
        return version
    }
    jarDependency = { group, artifact ->
        String groupWithArtifact = "${group}:${artifact}"
        return "${groupWithArtifact}:${ext.jarDependencyVersion(groupWithArtifact)}"
    }
    visualizationBackendJarBaseName = "visualizationBackend-with-dependencies"
    visualizationBackendJarPath = "${project(":visualization:backend").buildDir}/libs/" +
            "${ext.visualizationBackendJarBaseName}-${ext.constructVersion()}.jar"
    visualizationMeteorologicalDataJarBaseName = "visualizationMeteorologicalData-with-dependencies"
    visualizationMeteorologicalDataJarPath = "${project(":visualization:meteorological_data").buildDir}/libs/" +
            "${ext.visualizationMeteorologicalDataJarBaseName}-${ext.constructVersion()}.jar"
    dockerContainerExists = { String containerName ->
        def execResult = exec {
            commandLine("docker")
            args("inspect", containerName)
            ignoreExitValue(true)
        }
        return 0 == execResult.getExitValue()
    }
    startDockerContainer = { String containerName, String imageName, List<String> extendArgList ->
        exec {
            List<String> argumentList = new ArrayList<>()
            argumentList.addAll("run", "--rm")
            extendArgList.each { argument -> argumentList.add(argument) }
            argumentList.addAll(
                    "--name", containerName,
                    "-d", imageName,
            )
            commandLine("docker")
            args(argumentList)
        }
    }
    stopDockerContainer = { String containerName ->
        exec {
            commandLine("docker")
            args("kill", containerName)
        }
    }
    flinkPackagePath = "${project.buildDir.getAbsolutePath()}/flink-1.11.2-bin-scala_2.11.tgz"
}

task downloadFlinkPackage(type: Download) {
    src "https://mirror.bit.edu.cn/apache/flink/flink-1.11.2/flink-1.11.2-bin-scala_2.11.tgz"
    dest project.ext.flinkPackagePath
    tempAndMove true
    overwrite false
}
